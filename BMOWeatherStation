#include <SPI.h>
#include <Wire.h>
#include <TFT_22_ILI9225.h>

//wifi module
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>
#include "WeatherData.h"
#include "TimeLib.h"

// Color definitions
#define BLACK    0x0000
#define BLUE     0x001F
#define RED      0xF800
#define GREEN    0x07E0
#define CYAN     0x07FF
#define MAGENTA  0xF81F
#define YELLOW   0xFFE0
#define WHITE    0xFFFF
#define GREY     0xC618

// Define pins that will be used as parameters in the TFT constructor

#define TFT_RST D4
#define TFT_RS  D2
#define TFT_CS  D8  // SS
#define TFT_SDI D7  // MOSI
#define TFT_CLK D5  // SCK
#define TFT_LED D1   // 0 if wired to +5V directly


WeatherData weatherData = WeatherData();

const String API_KEY = "e35abe76d6314023f461f266881a7462"; //add your own accuweather API KEY
String city = "Seoul "; // add your prefered city
String units = "metric"; // (options: metric/imperial )

const char* ssid = "KT_GiGA_2G_B57E"; //TODO REMOVE before push to github
const char* password = "0226166841a!"; //TODO REMOVE before push to github

// Instantiate the TFT constructor with the pin values defined above
//Adafruit_ST7735 tft = Adafruit_ST7735(cs, dc, rst);
TFT_22_ILI9225 tft = TFT_22_ILI9225(TFT_RST, TFT_RS, TFT_CS, TFT_LED, 200);
long weatherDataTimer = 0;

void setup () {
  tft.begin();
  Serial.begin(9600);
  
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print("Connecting..");
  }
  
  tft.setFont(Terminal6x8);
  tft.drawText(30, 80, "Connected");
  tft.clear();
  initWeather();
}

void loop() {
  if (millis() - weatherDataTimer > 60000) {
    initWeather();
    weatherDataTimer = millis();
  }
}

void initWeather() {
  if (WiFi.status() != WL_CONNECTED) {
    tft.clear();
    tft.setFont(Terminal6x8);
    tft.drawText(30, 80, "Disconnected");
  } else {
    getWeatherData();
  }
}


void getWeatherData() {
  String url = "http://api.openweathermap.org/data/2.5/weather?q=" + city + "&units=" + units + "&APPID=" + API_KEY;

  HTTPClient http;  //Declare an object of class HTTPClient
  http.begin(url);  //Specify request destination
  int httpCode = http.GET();//Send the request
  if (httpCode > 0) { //Check t he returning code
    String payload = http.getString();   //Get the request response payload
    //parse data
    parseWeatherData(payload);
  }
  http.end();//Close connection
}

/**
 * Comverted json data using 
 * https://arduinojson.org/v5/assistant/
 */
void parseWeatherData(String payload) {
  const size_t capacity = JSON_ARRAY_SIZE(1) + JSON_OBJECT_SIZE(1) + 2 * JSON_OBJECT_SIZE(2) + 2 * JSON_OBJECT_SIZE(4) + JSON_OBJECT_SIZE(7) + JSON_OBJECT_SIZE(11) + 500;
  DynamicJsonBuffer jsonBuffer(capacity);

  JsonObject& root = jsonBuffer.parseObject(payload);
 
  float coord_lon = root["coord"]["lon"]; // 25.61
  float coord_lat = root["coord"]["lat"]; // 45.65

  JsonObject& weather_0 = root["weather"][0];
  int weather_0_id = weather_0["id"]; // 803
  const char* weather_0_main = weather_0["main"]; // "Clouds"
  const char* weather_0_description = weather_0["description"]; // "broken clouds"
  const char* weather_0_icon = weather_0["icon"]; // "04d"

  const char* base = root["base"]; // "stations"

  JsonObject& main = root["main"];
  float main_temp = main["temp"]; // -6.04
  float feel_temp = main["feels_like"]; // -6.04
  float main_pressure = main["pressure"]; // 1036.21
  int main_humidity = main["humidity"]; // 65
  float main_temp_min = main["temp_min"]; // -6.04
  float main_temp_max = main["temp_max"]; // -6.04
  float main_sea_level = main["sea_level"]; // 1036.21
  float main_grnd_level = main["grnd_level"]; // 922.42

  float wind_speed = root["wind"]["speed"]; // 1.21
  float wind_deg = root["wind"]["deg"]; // 344.501

  int clouds_all = root["clouds"]["all"]; // 68

  long dt = root["dt"]; // 1551023165

  JsonObject& sys = root["sys"];
  float sys_message = sys["message"]; // 0.0077
  const char* sys_country = sys["country"]; // COUNTRY
  long sys_sunrise = sys["sunrise"]; // 1550984672
  long sys_sunset = sys["sunset"]; // 1551023855

  long id = root["id"]; // 683844
  const char* cityName = root["name"]; // CITY
  int cod = root["cod"]; // 200
  
  tft.clear();
  getCurrentTimeRequest(coord_lat, coord_lon);
  
  displayTemperature(main_temp);
  displayFeelTemperature(feel_temp);
  displayIcon(weather_0_icon);
  displayDescription(weather_0_description);
  displayLocation(cityName);

  delay(5000);
}

void getCurrentTimeRequest(float latitude, float longitude) {
  String url = "http://api.geonames.org/timezoneJSON?lat=" + String(latitude) + "&lng=" + String(longitude) + "&username=kode";

  HTTPClient http;  //Declare an object of class HTTPClient
  http.begin(url);  //Specify request destination
  int httpCode = http.GET();//Send the request
  if (httpCode > 0) { //Check the returning code
    String payload = http.getString();   //Get the request response payload
    //parse data
    parseTimeData(payload);
  }
  http.end();   //Close connection
}

void parseTimeData(String payload) {
  const size_t capacity = JSON_OBJECT_SIZE(11) + 220;
  DynamicJsonBuffer jsonBuffer(capacity);

  JsonObject& root = jsonBuffer.parseObject(payload);

  const char* sunrise = root["sunrise"]; // "2019-03-08 06:44"
  float lng = root["lng"]; // 25.61
  const char* countryCode = root["countryCode"]; // "RO"
  int gmtOffset = root["gmtOffset"]; // 2
  int rawOffset = root["rawOffset"]; // 2
  const char* sunset = root["sunset"]; // "2019-03-08 18:13"
  const char* timezoneId = root["timezoneId"]; // "Europe/Bucharest"
  int dstOffset = root["dstOffset"]; // 3
  const char* countryName = root["countryName"]; // "Romania"
  const char* currentTime = root["time"]; // "2019-03-08 01:11"
  float lat = root["lat"]; // 45.65
  
  displayBMOFace();
  displayCurrentTime(currentTime);
  displaySunriseTime(sunrise);
  displaySunsetTime(sunset);
}

// FACE
void displayBMOFace() {
  tft.setFont(Terminal12x16);
  tft.drawText(40, 15, "O", GREEN);
  tft.drawText(120, 15, "O", GREEN);
  tft.drawText(80, 40, "U", GREEN);
}


// TIME
void displayCurrentTime(String currentTime) {
  String timeOnly = currentTime.substring(10);
  tft.setFont(Trebuchet_MS16x21);
  tft.drawText(50, 135, timeOnly);
}

// TEMPERATURE
void displayTemperature(float main_temp) {
  String temperatureValue = "Temp : " + String(main_temp,1) + " c";
  tft.setFont(Terminal11x16);
  //tft.setFont(Trebuchet_MS16x21);
  tft.drawText(10, 75, temperatureValue);
}

// Feel TEMPERATURE
void displayFeelTemperature(float feel_temp) {
  String temperatureValue = "Feel : " + String(feel_temp,1) + " c";
  tft.setFont(Terminal11x16);
  //tft.setFont(Trebuchet_MS16x21);
  tft.drawText(10, 95, temperatureValue);
}

// ICON
void displayIcon(String weatherIcon) {
  tft.drawBitmap(130, 70, weatherData.GetIcon(weatherIcon) , 50, 50, WHITE);
}

// DESCRIPTION
void displayDescription(String weatherDescription) {
  if(weatherDescription.length() > 18){
   weatherDescription = weatherDescription.substring(0, 15) + "...";
  }
  String description = String(weatherDescription);
  tft.setFont(Terminal11x16);
  tft.drawText(20, 115, description);
}

// SUNRISE
void displaySunriseTime(const char* sys_sunrise) {

  String sunrise = "Sunrise: " + String(sys_sunrise).substring(24,10);
  Serial.println(sys_sunrise);
  
  tft.setFont(Terminal6x8);
  tft.drawText(45, 170, sunrise);
}

// SUNSET
void displaySunsetTime(const char* sys_sunset) {

  String sunset = "Sunset: " + String(sys_sunset).substring(24,10);
  tft.setFont(Terminal6x8);
  tft.drawText(50, 180, sunset);
}

// LOCATION
void displayLocation(String cityName) {
  String loc = "City: " + String(cityName);
  tft.setFont(Terminal6x8);
  tft.drawText(50, 200, loc);
}
